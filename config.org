#+TITLE: Emacs Config
#+AUTHOR: Kushan Zaveri

Starting things off...

* Setup

** Configure package sources

Add repositories from which we'll load packages

#+BEGIN_SRC emacs-lisp
(require 'package)
(add-to-list 'package-archives '("melpa" . "http://melpa.org/packages/"))
(add-to-list 'package-archives '("melpa-stable" . "http://stable.melpa.org/packages/"))
(add-to-list 'package-archives '("org" . "http://orgmode.org/elpa/"))
(setq package-enable-at-startup nil)
#+END_SRC

** Setup `use-package`

#+BEGIN_SRC emacs-lisp
(unless (package-installed-p 'use-package)
  (package-refresh-contents)
  (package-install 'use-package)
  (eval-when-compile (require 'use-package)))
#+END_SRC

#+BEGIN_SRC emacs-lisp
(require 'use-package)
(setq 
	use-package-always-defer t
	use-package-always-ensure t)
#+END_SRC

** Visuals

*** Spacemacs 

#+BEGIN_SRC emacs-lisp
(use-package spacemacs-theme
  :init (load-theme 'spacemacs-dark t))
#+END_SRC

*** Emacs GUI
    
#+BEGIN_SRC emacs-lisp
(menu-bar-mode -1)
(toggle-scroll-bar -1)
(tool-bar-mode -1)
(add-to-list 'default-frame-alist
             '(font . "Source Code Pro-14"))
#+END_SRC

*** Powerline

#+BEGIN_SRC emacs-lisp
(use-package powerline
	:init (powerline-default-theme))
#+END_SRC

** Behaviour

#+BEGIN_SRC emacs-lisp
(setq make-backup-files nil)
(setq auto-save-default nil)
(setq create-lockfiles nil)
(setq backup-directory-alist '(("" . "~/.emacs.d/backup")))
#+END_SRC
  
** Extensions
   
*** Evil Mode

**** Evil
#+BEGIN_SRC emacs-lisp
(use-package evil
	:init (evil-mode t)
	:after (evil-leader)
	:config	
	(setq evil-default-cursor t)
	(global-display-line-numbers-mode))
#+END_SRC

**** Evil Leader

#+BEGIN_SRC emacs-lisp
(use-package evil-leader
    :init (global-evil-leader-mode)
    :config	
    (evil-leader/set-leader "SPC")
    (evil-leader/set-key
	"j" 'windmove-down
	"k" 'windmove-up
	"h" 'windmove-left
	"l" 'windmove-right

	"J" (lambda () (interactive) (split-window-vertically) (windmove-down))
	"K" (lambda () (interactive) (split-window-vertically))
	"H" (lambda () (interactive) (split-window-horizontally))
	"L" (lambda () (interactive) (split-window-horizontally) (windmove-right))

	"f" 'find-file
	"n" 'switch-to-buffer

	"p" 'projectile-commander

	"b" 'kill-buffer
	"q" 'delete-window))
#+END_SRC
*** Projectile
    
#+BEGIN_SRC emacs-lisp
(use-package projectile
    :init (projectile-mode 1)
    :config
    (setq projectile-project-search-path '("~/Documents"))
    (define-key projectile-mode-map (kbd "s-p") 'projectile-command-map)
    (define-key projectile-mode-map (kbd "C-c p") 'projectile-command-map)
    )
#+END_SRC

*** Uncategorized

#+BEGIN_SRC emacs-lisp
(desktop-save-mode 1)
#+END_SRC

** Language Support

*** Elixir
  
#+BEGIN_SRC emacs-lisp
(use-package elixir-mode
    :mode 
    "\\.ex"
    "\\.exs"
    :interpreter "elixir")
#+END_SRC

#+BEGIN_SRC emacs-lisp
(use-package alchemist
    :after elixir-mode)
#+END_SRC

